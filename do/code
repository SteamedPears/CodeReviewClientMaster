{"id":28,"text":"/******************************************************************************\r\n* view.js                                                                     *\r\n* Copyright 2012, Alexis Beingessner and Simon Pratt                          *\r\n******************************************************************************/\r\n(function() {\r\n    var comments_div,\r\n    highlight_start = -1,\r\n    highlight_end = -1,\r\n    selection_start = -1,\r\n    selection_end = -1,\r\n    comment_ob = null,\r\n    comment_box_ob = null,\r\n    num_lines = -1,\r\n    comments = {};\r\n\r\n/******************************************************************************\r\n* Utility Functions                                                           *\r\n******************************************************************************/\r\n\r\n    function modulo(n,m) {\r\n\twhile(n < 0)\r\n\t    n += m;\r\n\treturn n%m;\r\n    }\r\n\r\n    function logError(text) {\r\n\tconsole.log('ERROR: ' + text);\r\n    }\r\n\r\n    function reportError(text) {\r\n\tlogError(text);\r\n\t$('#error').text(text).show();\r\n    }\r\n\r\n    // http://www.quirksmode.org/dom/range_intro.html\r\n    function getSelected() {\r\n\tif(window.getSelection)\r\n\t    return window.getSelection();\r\n\tif(document.getSelection)\r\n\t    return document.getSelection();\r\n\tif(document.selection) // opera\r\n\t    return document.selection.createRange();\r\n\tlogError(\"Couldn't get selected range\");\r\n    }\r\n    \r\n    function getRangeObject(selectionObject) {\r\n\tif (selectionObject.getRangeAt)\r\n\t    return selectionObject.getRangeAt(0);\r\n\telse { // Safari!\r\n\t    var range = document.createRange();\r\n\t    range.setStart(selectionObject.anchorNode,\r\n\t\t\t   selectionObject.anchorOffset);\r\n\t    range.setEnd(selectionObject.focusNode,\r\n\t\t\t selectionObject.focusOffset);\r\n\t    return range;\r\n\t}\r\n    }\r\n\r\n    function handleAjaxError(jqXHR, textStatus, errorThrown) {\r\n\treportError(errorThrown);\r\n    }\r\n\r\n    \r\n/******************************************************************************\r\n* Highlighting                                                                *\r\n******************************************************************************/\r\n\r\n    function highlightLines(start,end,highlighted) {\r\n\thighlight_start = start;\r\n\thighlight_end = end;\r\n\twhile(start <= end) {\r\n\t    $('#line_pre' + start).toggleClass('highlighted',highlighted);\r\n\t    $('#line' + start).toggleClass('highlighted',highlighted);\r\n\t    ++start;\r\n\t}\r\n    }\r\n\r\n    function clearHighlighting() {\r\n\thighlightLines(highlight_start,highlight_end,false);\r\n\thighlight_start = -1;\r\n\thighlight_end = -1;\r\n    }\r\n\r\n    function highlightComment(comment) {\r\n\tclearHighlighting();\r\n\thighlightLines(comment.line_start,\r\n\t\t       comment.line_end,\r\n\t\t       true);\r\n    }\r\n\r\n/******************************************************************************\r\n* Data retrieval                                                              *\r\n******************************************************************************/\r\n\r\n    function getCode(id,success_fn,error_fn) {\r\n\t$.ajax('do/code',{\r\n\t    data:     {id:id},\r\n\t    dataType: 'json',\r\n\t    error:    error_fn,\r\n\t    success:  success_fn\r\n\t});\r\n    }\r\n\r\n    function getComments(id,success_fn,error_fn) {\r\n\t$.ajax('do/comments',{\r\n\t    data:     {code_id:id},\r\n\t    dataType: 'json',\r\n\t    error:    error_fn,\r\n\t    success:  success_fn\r\n\t});\r\n    }\r\n\r\n    function getLanguage(id,success_fn,error_fn) {\r\n\t$.ajax('do/language',{\r\n\t    data:     {id:id},\r\n\t    dataType: 'json',\r\n\t    error:    error_fn,\r\n\t    success:  success_fn\r\n\t});\r\n    }\r\n\r\n/******************************************************************************\r\n* Comment Input                                                               *\r\n******************************************************************************/\r\n\r\n    function showCommentBox(start,end) {\r\n\tcloseComments();\r\n\thighlightLines(start,end,true);\r\n\tselection_start = start;\r\n\tselection_end = end;\r\n\t$('input#line_start').val(start);\r\n\t$('input#line_end').val(end);\r\n\tvar comment_box = $('#comment_box');\r\n\t\r\n\tvar top = Number($('#line'+start).position().top);\r\n\tcomment_box.css('top',top);\r\n\tvar comment_ob = $('#comment1');\r\n\tvar left = comment_ob.position().left;\r\n\tcomment_box.css('left',left);\r\n\tvar width = comment_ob.css('width');\r\n\twidth = width.substring(0,width.indexOf('px'));\r\n\tcomment_box.css('width',width);\r\n\t$('input#user').css('width',width);\r\n\tvar last_line_ob = $('#line'+num_lines);\r\n\tvar height = last_line_ob.css('height');\r\n\theight = Number(height.substring(0,height.indexOf('px')));\r\n\theight += Number(last_line_ob.position().top);\r\n\tcomment_box.css('height',height);\r\n\tcomment_box.show();\r\n    }\r\n\r\n    function closeCommentBox() {\r\n\t$('#comment_box').hide();\r\n\tclearHighlighting();\r\n\tselection_start = -1;\r\n\tselection_end = -1;\r\n    }\r\n    \r\n/******************************************************************************\r\n* Comment Display                                                             *\r\n******************************************************************************/\r\n\r\n    function buildCommentStructure(comments_ob) {\r\n\tvar comments_list = comments_ob.comments;\r\n\tfor(var index in comments_list) {\r\n\t    var comment = comments_list[index];\r\n\t    var line_start = comment.line_start;\r\n\t    if(comments[line_start] === undefined)\r\n\t\tcomments[line_start] = [];\r\n\t    comments[line_start].push(comment);\r\n\t}\r\n    }\r\n\r\n    function clearComments() {\r\n\tfor(var i in comments) {\r\n\t    $('#comment'+i).text('');\r\n\t}\r\n    }\r\n\r\n    function displayComment(text_ob,name_ob,comment_ob) {\r\n\tname_ob.text(comment_ob.user);\r\n\ttext_ob.text('');\r\n\ttext_ob.append($('<span>').text(comment_ob.text));\r\n    }\r\n\r\n    function closeComments() {\r\n\tclearComments();\r\n\tclearHighlighting();\r\n\tfor(var i in comments) {\r\n\t    writeComment(i,comments[i]);\r\n\t}\r\n\tif(comment_ob === null)\r\n\t    return;\r\n\tcomment_ob.hide()\r\n    }\r\n\r\n    function writeComments(comments_ob) {\r\n\tif((typeof comments_ob) === \"string\"){\r\n    \t    comments_ob = jQuery.parseJSON(comments_ob);\r\n\t}\r\n\tbuildCommentStructure(comments_ob);\r\n\tcloseComments();\r\n    }\r\n\r\n    function openComment(n) {\r\n\tclearComments();\r\n\tvar i = -1;\r\n\tvar num = comments[n].length;\r\n\r\n\t// position comment window\r\n\r\n\tvar top = Number($('#line'+n).position().top);\r\n\tcomment_ob.css('top',top);\r\n\tvar left = $('#comment'+n).position().left;\r\n\tcomment_ob.css('left',left);\r\n\tvar width = $('#comment'+n).css('width');\r\n\tcomment_ob.css('width',width);\r\n\tcomment_ob.show();\r\n\t\r\n\tvar name_ob = $('#user_name');\r\n\tvar comment_text_ob = $('#comment_text');\r\n\t\r\n\t// previous button\r\n\tvar prev = $('#prev_button');\r\n\tprev.click(function() {\r\n\t    i = modulo(i-1,num);\r\n\t    highlightComment(comments[n][i]);\r\n\t    displayComment(comment_text_ob,name_ob,comments[n][i]);\r\n\t});\r\n\t\r\n\t// next button\r\n\tvar next = $('#next_button');\r\n\tnext.click(function() {\r\n\t    i = modulo(i+1,num);\r\n\t    highlightComment(comments[n][i]);\r\n\t    displayComment(comment_text_ob,name_ob,comments[n][i]);\r\n\t});\r\n\tnext.click();\r\n\r\n\t// close button\r\n\tvar close = $('#close_button');\r\n\tclose.click(function() {\r\n\t    closeComments()\r\n\t});\r\n    }\r\n\r\n    function writeComment(n,comment) {\r\n\tvar ob = $('<div>');\r\n\tob.addClass('window');\r\n\tvar text = comment.length + \" comment\";\r\n\tif(comment.length > 1)\r\n\t    text += \"s\";\r\n\tob.text(text);\r\n\tob.click(function() {\r\n\t    openComment(n);\r\n\t});\r\n\t$('#comment'+n).append(ob);\r\n    }\r\n    \r\n/******************************************************************************\r\n* Code Display                                                                *\r\n******************************************************************************/\r\n    \r\n    function buildCodeTable(n,line,language_code) {\r\n\tvar toPrint = $('<tr>');\r\n\tvar line_num = $('<td>');\r\n\tline_num.text(n);\r\n\tline_num.addClass('small');\r\n\ttoPrint.append(line_num);\r\n\tvar line_cell = $('<td>');\r\n\tline_cell.addClass('code');\r\n\tline_cell.data('line',n);\r\n\tline_cell.attr('id','line_cell'+n);\r\n\ttoPrint.append(line_cell);\r\n\tvar line_pre = $('<pre class=\"codeBlock\">');\r\n\tline_pre.data('line',n);\r\n\tline_pre.attr('id','line_pre'+n);\r\n\tline_cell.append(line_pre);\r\n\tvar line_code = $('<code class=\"codeBlock\">')\r\n\tline_code.attr('id','line'+n);\r\n\tline_code.text(line);\r\n\tline_code.data('line',n);\r\n\tline_code.attr('data-language',language_code);\r\n\tline_pre.append(line_code);\r\n\ttoPrint.append($('<td>').attr('id','comment'+n));\r\n\t$('#code_table').append(toPrint);\r\n    }\r\n\r\n    function writeCodeLines(code) {\r\n\tif(code === null) return;\r\n\tif((typeof code) === \"string\"){\r\n\t    code = jQuery.parseJSON(code);\r\n\t}\r\n\tvar lines = code.text.split('\\n');\r\n\tnum_lines = lines.length;\r\n\tgetLanguage(code.language_id,function(language) {\r\n\t    for(var i in lines) {\r\n\t\tbuildCodeTable(Number(i)+1,lines[i]+'\\n',language.code);\r\n\t    }\r\n\t    $('input#code_id').val(code.id);\r\n\t    highlightSyntax(language);\r\n\t},handleAjaxError);\r\n\tgetComments(code.id,writeComments,handleAjaxError);\r\n    }\r\n\r\n    function highlightSyntax(language) {\r\n\tif(language === null ||\r\n\t   language.code === undefined ||\r\n\t   language.code === 'none')\r\n\t    return;\r\n\t// load the appropriate language script\r\n\tvar language_script = $('<script>');\r\n\tlanguage_script.attr('src',\r\n\t\t\t     'include/rainbow/js/language/'+language.code+'.js');\r\n\t$('head').append(language_script);\r\n\t// call rainbow\r\n\tRainbow.color();\r\n    }\r\n    \r\n/******************************************************************************\r\n* Run when display ready                                                      *\r\n******************************************************************************/\r\n\r\n    $(document).ready(function() {\r\n\tcomment_ob = $('#comment_window');\r\n\t$('#comment_box').hide();\r\n\t$('#error').hide();\r\n\t// retrieve and display code\r\n\tvar query = URI(document.URL).query(true);\r\n\tif(query.error != undefined) {\r\n\t    reportError(query.error);\r\n\t}\r\n\tif(query.id === undefined) {\r\n\t    reportError(\"Code ID not found\");\r\n\t    return;\r\n\t}\r\n\tgetCode(query.id,writeCodeLines,handleAjaxError);\r\n\r\n\t// handle text selection\r\n\t$(document).mouseup(function() {\r\n\t    var selected = getSelected();\r\n\t    var range = getRangeObject(selected);\r\n\t    var start_ob = $(range.startContainer.parentElement);\r\n\t    var end_ob = $(range.endContainer.parentElement);\r\n\t    var line_start = start_ob.data('line');\r\n\t    var line_end = end_ob.data('line');\r\n\t    if(line_start === undefined || line_end === undefined) {\r\n\t\tstart_ob = start_ob.parent().parent();\r\n\t\tend_ob = end_ob.parent().parent();\r\n\t\tline_start = start_ob.data('line');\r\n\t\tline_end = end_ob.data('line');\r\n\t\tif(line_start === undefined || line_end === undefined) {\r\n\t\t    closeCommentBox();\r\n\t\t    return;\r\n\t\t}\r\n\t    }\r\n\t    showCommentBox(line_start,line_end);\r\n\t});\r\n\t$('#comment_form').mouseup(function() { return false; });\r\n    });\r\n})();\r\n","language_id":21,"createdAt":"2012-06-24T06:34:57.000Z","updatedAt":"2012-06-24T06:34:57.000Z"}